#!/bin/bash

# tmux-window - Create or switch to tmux window with neovim setup
# Usage: tmux-window <session_name> <window_name> <directory_path>
#
# This script creates a standardized tmux window with:
#   - Top pane: neovim
#   - Bottom pane: terminal
#   - Focus on the neovim pane
#
# If the window already exists, it switches to it.

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to check if window exists in session
window_exists() {
    local session_name="$1"
    local window_name="$2"
    tmux list-windows -t "$session_name" -F "#{window_name}" 2>/dev/null | grep -q "^${window_name}$"
}

# Function to create window with neovim setup
create_window() {
    local session_name="$1"
    local window_name="$2"
    local directory_path="$3"
    
    echo -e "${BLUE}Creating window: $window_name${NC}" >&2
    
    # Create new window
    tmux new-window -t "$session_name" -n "$window_name" -c "$directory_path"
    
    # Split window vertically (top and bottom panes)
    tmux split-window -t "$session_name:$window_name" -v -c "$directory_path"
    
    # Small delay to ensure panes are ready
    sleep 0.1
    
    # Start neovim in the top pane (pane 0)
    tmux send-keys -t "$session_name:$window_name.0" 'nvim' Enter
    
    # Focus on the top pane with neovim
    tmux select-pane -t "$session_name:$window_name.0"
}

# Function to attach to session and select window
attach_session() {
    local session_name="$1"
    local window_name="$2"
    
    if [ -n "$TMUX" ]; then
        # We're already in tmux, switch to the session/window
        tmux switch-client -t "$session_name:$window_name"
    else
        # Not in tmux, attach to session
        tmux attach-session -t "$session_name:$window_name"
    fi
}

# Main script logic
main() {
    # Check for required parameters
    if [ $# -ne 3 ]; then
        echo -e "${RED}Error: Invalid number of arguments${NC}" >&2
        echo "Usage: tmux-window <session_name> <window_name> <directory_path>" >&2
        exit 1
    fi
    
    local session_name="$1"
    local window_name="$2"
    local directory_path="$3"
    
    # Validate directory path exists
    if [ ! -d "$directory_path" ]; then
        echo -e "${RED}Error: Directory '$directory_path' does not exist${NC}" >&2
        exit 1
    fi
    
    # Check if tmux session exists
    if ! tmux has-session -t "$session_name" 2>/dev/null; then
        echo -e "${RED}Error: Tmux session '$session_name' does not exist${NC}" >&2
        echo -e "${YELLOW}Create the session first with: tmux new-session -s $session_name${NC}" >&2
        exit 1
    fi
    
    # Check if window already exists
    if window_exists "$session_name" "$window_name"; then
        echo -e "${GREEN}Window '$window_name' already exists in session '$session_name'${NC}" >&2
        echo -e "${GREEN}Switching to existing window...${NC}" >&2
        attach_session "$session_name" "$window_name"
    else
        # Create new window with neovim setup
        create_window "$session_name" "$window_name" "$directory_path"
        echo -e "${GREEN}Window '$window_name' created successfully${NC}" >&2
        attach_session "$session_name" "$window_name"
    fi
}

# Run main function
main "$@"
