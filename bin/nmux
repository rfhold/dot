#!/bin/bash

# nmux - Fuzzy search repos and open in tmux with neovim
# Usage: nmux [category/repo-name]
#   nmux                           - Interactive mode with fuzzy search
#   nmux stablekernel/github-token-bot - Direct mode with specific repo

# Configuration
REPOS_DIR="$HOME/repos"

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to check if directory exists
check_repos_dir() {
    if [ ! -d "$REPOS_DIR" ]; then
        echo -e "${RED}Error: Repos directory '$REPOS_DIR' not found.${NC}" >&2
        exit 1
    fi
}

# Function to get list of repos
get_repos() {
    find "$REPOS_DIR" -mindepth 2 -maxdepth 2 -type d 2>/dev/null | \
        sed "s|$REPOS_DIR/||" | sort
}

# Function to check if tmux session exists
session_exists() {
    local session_name="$1"
    tmux has-session -t "$session_name" 2>/dev/null
}

# Function to create or get session
ensure_session() {
    local category="$1"
    local session_name="$category"
    
    if ! session_exists "$session_name"; then
        echo -e "${BLUE}Creating new tmux session: $session_name${NC}" >&2
        # Create session without any windows initially
        tmux new-session -d -s "$session_name" -c "$REPOS_DIR/$category" 'sleep 1'
        # Wait a moment for session to be fully created
        sleep 0.1
    else
        echo -e "${GREEN}Using existing tmux session: $session_name${NC}" >&2
    fi
    
    echo "$session_name"
}

# Function to clone GitHub repository via SSH
clone_github_repo() {
    local repo_path="$1"
    local category=$(echo "$repo_path" | cut -d'/' -f1)
    local repo_name=$(echo "$repo_path" | cut -d'/' -f2)
    local category_dir="$REPOS_DIR/$category"
    local full_path="$REPOS_DIR/$repo_path"
    local github_url="git@github.com:${repo_path}.git"
    
    echo -e "${YELLOW}Repository '$repo_path' not found locally.${NC}" >&2
    echo -e "${BLUE}Attempting to clone from GitHub: $github_url${NC}" >&2
    
    # Create category directory if it doesn't exist
    if [ ! -d "$category_dir" ]; then
        echo -e "${BLUE}Creating category directory: $category_dir${NC}" >&2
        mkdir -p "$category_dir"
    fi
    
    # Clone the repository
    if git clone "$github_url" "$full_path"; then
        echo -e "${GREEN}Successfully cloned $repo_path${NC}" >&2
        return 0
    else
        echo -e "${RED}Failed to clone repository from $github_url${NC}" >&2
        echo -e "${YELLOW}Make sure the repository exists and you have SSH access.${NC}" >&2
        return 1
    fi
}

# Function to validate repo path
validate_repo() {
    local repo_path="$1"
    local full_path="$REPOS_DIR/$repo_path"
    
    # Check if it follows category/repo structure
    if [[ ! "$repo_path" =~ ^[^/]+/[^/]+$ ]]; then
        echo -e "${RED}Error: Repository path must be in format 'category/repo-name'${NC}" >&2
        exit 1
    fi
    
    if [ ! -d "$full_path" ]; then
        # Try to clone from GitHub if it doesn't exist
        if ! clone_github_repo "$repo_path"; then
            echo -e "${YELLOW}Available repositories:${NC}" >&2
            get_repos | sed 's/^/  /' >&2
            exit 1
        fi
    fi
}

# Main function
main() {
    check_repos_dir
    
    local selected_repo
    
    # Check if repo was provided as argument
    if [ -n "$1" ]; then
        # Direct mode - use provided repo path
        selected_repo="$1"
        validate_repo "$selected_repo"
        echo -e "${BLUE}Direct mode: Using repository '$selected_repo'${NC}" >&2
    else
        # Interactive mode - use gum to select
        # Get list of available repos
        repos=$(get_repos)
        
        if [ -z "$repos" ]; then
            echo -e "${RED}No repositories found in $REPOS_DIR${NC}" >&2
            echo "Expected structure: $REPOS_DIR/category/repo-name" >&2
            exit 1
        fi
        
        # Let user choose a repo with fuzzy search
        selected_repo=$(echo "$repos" | gum filter --prompt 'repo name >' --placeholder '')
        
        if [ -z "$selected_repo" ]; then
            echo -e "${RED}No repository selected.${NC}" >&2
            exit 1
        fi
    fi
    
    # Parse category and repo name
    category=$(echo "$selected_repo" | cut -d'/' -f1)
    repo_name=$(echo "$selected_repo" | cut -d'/' -f2)
    repo_path="$REPOS_DIR/$selected_repo"
    
    echo -e "${YELLOW}Selected: $selected_repo${NC}" >&2
    echo -e "${YELLOW}Category: $category${NC}" >&2
    echo -e "${YELLOW}Repository: $repo_name${NC}" >&2
    
    # Ensure session exists for the category
    session_name=$(ensure_session "$category")
    
    # Use tmux-window script to create/switch to window
    local script_dir
    script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    
    if [ ! -x "$script_dir/tmux-window" ]; then
        echo -e "${RED}Error: tmux-window script not found or not executable${NC}" >&2
        echo -e "${YELLOW}Expected at: $script_dir/tmux-window${NC}" >&2
        exit 1
    fi
    
    "$script_dir/tmux-window" "$session_name" "$repo_name" "$repo_path"
}

# Run main function
main "$@"
