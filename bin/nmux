#!/bin/bash

# nmux - Fuzzy search repos and open in tmux with neovim
# Usage: nmux [category/repo-name]
#   nmux                           - Interactive mode with fuzzy search
#   nmux stablekernel/github-token-bot - Direct mode with specific repo

# Configuration
REPOS_DIR="$HOME/repos"

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to check if directory exists
check_repos_dir() {
    if [ ! -d "$REPOS_DIR" ]; then
        echo -e "${RED}Error: Repos directory '$REPOS_DIR' not found.${NC}" >&2
        exit 1
    fi
}

# Function to get list of repos
get_repos() {
    find "$REPOS_DIR" -mindepth 2 -maxdepth 2 -type d 2>/dev/null | \
        sed "s|$REPOS_DIR/||" | sort
}

# Function to check if tmux session exists
session_exists() {
    local session_name="$1"
    tmux has-session -t "$session_name" 2>/dev/null
}

# Function to check if window exists in session
window_exists() {
    local session_name="$1"
    local window_name="$2"
    tmux list-windows -t "$session_name" -F "#{window_name}" 2>/dev/null | grep -q "^${window_name}$"
}

# Function to create or get session
ensure_session() {
    local category="$1"
    local session_name="$category"
    
    if ! session_exists "$session_name"; then
        echo -e "${BLUE}Creating new tmux session: $session_name${NC}" >&2
        # Create session without any windows initially
        tmux new-session -d -s "$session_name" -c "$REPOS_DIR/$category" 'sleep 1'
        # Wait a moment for session to be fully created
        sleep 0.1
    else
        echo -e "${GREEN}Using existing tmux session: $session_name${NC}" >&2
    fi
    
    echo "$session_name"
}

# Function to create window with neovim setup
create_window() {
    local session_name="$1"
    local window_name="$2"
    local repo_path="$3"
    
    echo -e "${BLUE}Creating window: $window_name${NC}" >&2
    
    # Create new window
    tmux new-window -t "$session_name" -n "$window_name" -c "$repo_path"
    
    # Split window vertically (top and bottom panes)
    tmux split-window -t "$session_name:$window_name" -v -c "$repo_path"
    
    # Small delay to ensure panes are ready
    sleep 0.1
    
    # Start neovim in the top pane (pane 0)
    tmux send-keys -t "$session_name:$window_name.0" 'nvim' Enter
    
    # Focus on the top pane with neovim
    tmux select-pane -t "$session_name:$window_name.0"
}

# Function to attach to session and select window
attach_session() {
    local session_name="$1"
    local window_name="$2"
    
    if [ -n "$TMUX" ]; then
        # We're already in tmux, switch to the session/window
        tmux switch-client -t "$session_name:$window_name"
    else
        # Not in tmux, attach to session
        tmux attach-session -t "$session_name:$window_name"
    fi
}

# Function to validate repo path
validate_repo() {
    local repo_path="$1"
    local full_path="$REPOS_DIR/$repo_path"
    
    if [ ! -d "$full_path" ]; then
        echo -e "${RED}Error: Repository '$repo_path' not found at '$full_path'${NC}" >&2
        echo -e "${YELLOW}Available repositories:${NC}" >&2
        get_repos | sed 's/^/  /' >&2
        exit 1
    fi
    
    # Check if it follows category/repo structure
    if [[ ! "$repo_path" =~ ^[^/]+/[^/]+$ ]]; then
        echo -e "${RED}Error: Repository path must be in format 'category/repo-name'${NC}" >&2
        exit 1
    fi
}

# Main function
main() {
    check_repos_dir
    
    local selected_repo
    
    # Check if repo was provided as argument
    if [ -n "$1" ]; then
        # Direct mode - use provided repo path
        selected_repo="$1"
        validate_repo "$selected_repo"
        echo -e "${BLUE}Direct mode: Using repository '$selected_repo'${NC}" >&2
    else
        # Interactive mode - use gum to select
        # Get list of available repos
        repos=$(get_repos)
        
        if [ -z "$repos" ]; then
            echo -e "${RED}No repositories found in $REPOS_DIR${NC}" >&2
            echo "Expected structure: $REPOS_DIR/category/repo-name" >&2
            exit 1
        fi
        
        # Let user choose a repo with fuzzy search
        selected_repo=$(echo "$repos" | gum filter --prompt 'repo name >' --placeholder '')
        
        if [ -z "$selected_repo" ]; then
            echo -e "${RED}No repository selected.${NC}" >&2
            exit 1
        fi
    fi
    
    # Parse category and repo name
    category=$(echo "$selected_repo" | cut -d'/' -f1)
    repo_name=$(echo "$selected_repo" | cut -d'/' -f2)
    repo_path="$REPOS_DIR/$selected_repo"
    
    echo -e "${YELLOW}Selected: $selected_repo${NC}" >&2
    echo -e "${YELLOW}Category: $category${NC}" >&2
    echo -e "${YELLOW}Repository: $repo_name${NC}" >&2
    
    # Ensure session exists for the category
    session_name=$(ensure_session "$category")
    
    # Check if window already exists
    if window_exists "$session_name" "$repo_name"; then
        echo -e "${GREEN}Window '$repo_name' already exists in session '$session_name'${NC}" >&2
        attach_session "$session_name" "$repo_name"
    else
        # Create new window with neovim setup
        create_window "$session_name" "$repo_name" "$repo_path"
        attach_session "$session_name" "$repo_name"
    fi
}

# Run main function
main "$@"
